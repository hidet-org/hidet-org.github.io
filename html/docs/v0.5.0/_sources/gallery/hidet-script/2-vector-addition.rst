
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/hidet-script/2-vector-addition.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_hidet-script_2-vector-addition.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_hidet-script_2-vector-addition.py:


Vector Addition
===============

.. GENERATED FROM PYTHON SOURCE LINES 6-7

In this example, we will show you how to write a program that adds two float32 vectors in hidet script.

.. GENERATED FROM PYTHON SOURCE LINES 7-13

.. code-block:: Python

    import hidet
    from hidet.lang import attrs
    from hidet.lang.types import f32

    hidet.option.cache_dir('./outs/cache')








.. GENERATED FROM PYTHON SOURCE LINES 14-20

In the script function, we annotate the data type of parameter ``a``, ``b``, and ``c`` as ``f32[3]``, which means
a 3-element vector of 32-bit floating point numbers. In general, we can use ``dtype[shape]`` to define a tensor with
given shape and data type. For example, ``f32[3, 4]`` is a 3x4 float32 matrix, and ``int32[3, 4, 5]`` is a 3x4x5 int32
tensor.

We can use ``for i in range(extent)`` to iterate over a range, where ``extent`` is the extent of the loop.

.. GENERATED FROM PYTHON SOURCE LINES 20-32

.. code-block:: Python

    with hidet.script_module() as script_module:

        @hidet.script
        def launch(a: f32[3], b: f32[3], c: f32[3]):
            attrs.func_kind = 'public'

            for i in range(10):
                c[i] = a[i] + b[i]


    module = script_module.build()








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Create the input and output tensors (on cpu, with f32 data type by default):

.. GENERATED FROM PYTHON SOURCE LINES 34-38

.. code-block:: Python

    a = hidet.randn([3])
    b = hidet.randn([3])
    c = hidet.empty([3])








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Call the compiled module with the input and output tensors

.. GENERATED FROM PYTHON SOURCE LINES 40-44

.. code-block:: Python

    module(a, b, c)
    print(a)
    print(b)
    print(c)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Tensor(shape=(3,), dtype='float32', device='cpu')
    [-0.78  0.59  0.18]
    Tensor(shape=(3,), dtype='float32', device='cpu')
    [ 0.   -0.56 -0.32]
    Tensor(shape=(3,), dtype='float32', device='cpu')
    [-0.77  0.02 -0.14]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.198 seconds)


.. _sphx_glr_download_gallery_hidet-script_2-vector-addition.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 2-vector-addition.ipynb <2-vector-addition.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 2-vector-addition.py <2-vector-addition.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 2-vector-addition.zip <2-vector-addition.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
